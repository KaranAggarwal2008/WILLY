{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Karan\\\\Downloads\\\\Wireless_Library-main\\\\screens\\\\SearchScreen.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport db from \"../config\";\n\nvar Searchscreen = function (_React$Component) {\n  _inherits(Searchscreen, _React$Component);\n\n  var _super = _createSuper(Searchscreen);\n\n  function Searchscreen(props) {\n    var _this;\n\n    _classCallCheck(this, Searchscreen);\n\n    _this = _super.call(this, props);\n\n    _this.fetchMoreTransactions = function _callee() {\n      var text, enteredText, query, _query;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              text = _this.state.searchedID.toUpperCase();\n              enteredText = text.split('');\n\n              if (!(enteredText[0].toUpperCase() === 'B')) {\n                _context.next = 9;\n                break;\n              }\n\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(db.collection('TRANSACTIONS').where('BOOKID', '==', text).startAfter(_this.state.lastVisibleTransaction).limit(10).get());\n\n            case 5:\n              query = _context.sent;\n              query.docs.map(function (doc) {\n                _this.setState({\n                  allTransactions: [].concat(_toConsumableArray(_this.state.allTransactions), [doc.data()]),\n                  lastVisibleTransaction: doc\n                });\n              });\n              _context.next = 14;\n              break;\n\n            case 9:\n              if (!(enteredText[0].toUpperCase() === 'S')) {\n                _context.next = 14;\n                break;\n              }\n\n              _context.next = 12;\n              return _regeneratorRuntime.awrap(db.collection('TRANSACTIONS').where('STUDENTID', '==', text).startAfter(_this.state.lastVisibleTransaction).limit(10).get());\n\n            case 12:\n              _query = _context.sent;\n\n              _query.docs.map(function (doc) {\n                _this.setState({\n                  allTransactions: [].concat(_toConsumableArray(_this.state.allTransactions), [doc.data()]),\n                  lastVisibleTransaction: doc\n                });\n              });\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.searchTransactions = function _callee2(text) {\n      var enteredText, capitalTerm, transaction, _transaction;\n\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              console.log('firstTExt: ' + text);\n              enteredText = text.split('');\n              console.log('enteredText: ' + enteredText);\n              capitalTerm = text.toUpperCase();\n              console.log('capitalTerm: ' + capitalTerm);\n\n              if (!(enteredText[0].toUpperCase() === 'B')) {\n                _context2.next = 14;\n                break;\n              }\n\n              console.log('bookID is being searched ');\n              _context2.next = 9;\n              return _regeneratorRuntime.awrap(db.collection('TRANSACTIONS').where('BOOKID', '==', text).get());\n\n            case 9:\n              transaction = _context2.sent;\n              console.log('searched transaction' + transaction);\n              transaction.docs.map(function (doc) {\n                _this.setState({\n                  allTransactions: [].concat(_toConsumableArray(_this.state.allTransactions), [doc.data()]),\n                  lastVisibleTransaction: doc\n                });\n              });\n              _context2.next = 19;\n              break;\n\n            case 14:\n              if (!(enteredText[0].toUpperCase() === 'S')) {\n                _context2.next = 19;\n                break;\n              }\n\n              _context2.next = 17;\n              return _regeneratorRuntime.awrap(db.collection('TRANSACTIONS').where('STUDENTID', '==', text).get());\n\n            case 17:\n              _transaction = _context2.sent;\n\n              _transaction.docs.map(function (doc) {\n                _this.setState({\n                  allTransactions: [].concat(_toConsumableArray(_this.state.allTransactions), [doc.data()]),\n                  lastVisibleTransaction: doc\n                });\n              });\n\n            case 19:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.componentDidMount = function _callee3() {\n      var query;\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(db.collection('TRANSACTIONS').limit(10).get());\n\n            case 2:\n              query = _context3.sent;\n              console.log('searched query' + query);\n              query.docs.map(function (doc) {\n                _this.setState({\n                  allTransactions: [],\n                  lastVisibleTransaction: doc\n                });\n              });\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.state = {\n      allTransactions: [],\n      lastVisibleTransaction: null,\n      searchedID: ''\n    };\n    return _this;\n  }\n\n  _createClass(Searchscreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        style: styles.searchBar,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 9\n        }\n      }, React.createElement(TextInput, {\n        style: styles.bar,\n        placeholder: \"Enter Book ID or Student ID\",\n        onChangeText: function onChangeText(text) {\n          _this2.setState({\n            searchedID: text\n          });\n        },\n        value: this.state.searchedID,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }\n      }), React.createElement(TouchableOpacity, {\n        style: styles.searchButton,\n        onPress: function onPress() {\n          _this2.searchTransactions(_this2.state.searchedID);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }\n      }, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }\n      }, \"Search\"))), React.createElement(FlatList, {\n        data: this.state.allTransactions,\n        renderItem: function renderItem(_ref) {\n          var item = _ref.item;\n          return React.createElement(View, {\n            style: {\n              borderBottomWidth: 2\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 13\n            }\n          }, React.createElement(Text, {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 15\n            }\n          }, 'Book ID: ' + item.BOOKID), React.createElement(Text, {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 15\n            }\n          }, 'Student ID: ' + item.STUDENTID), React.createElement(Text, {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 15\n            }\n          }, 'Transaction Type: ' + item.TRANSACTIONTYPE), React.createElement(Text, {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 15\n            }\n          }, 'Date: ' + item.DATE.toDate()));\n        },\n        keyExtractor: function keyExtractor(item, index) {\n          return index.toString();\n        },\n        onEndReached: this.fetchMoreTransactions,\n        onEndReachedThreshold: 0.7,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return Searchscreen;\n}(React.Component);\n\nexport { Searchscreen as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 20\n  },\n  searchBar: {\n    flexDirection: 'row',\n    height: 40,\n    width: 'auto',\n    borderWidth: 0.5,\n    alignItems: 'center',\n    backgroundColor: 'grey'\n  },\n  bar: {\n    borderWidth: 2,\n    height: 30,\n    width: 300,\n    paddingLeft: 10\n  },\n  searchButton: {\n    borderWidth: 1,\n    height: 30,\n    width: 50,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'green'\n  }\n});","map":{"version":3,"sources":["C:/Users/Karan/Downloads/Wireless_Library-main/screens/SearchScreen.js"],"names":["React","db","Searchscreen","props","fetchMoreTransactions","text","state","searchedID","toUpperCase","enteredText","split","collection","where","startAfter","lastVisibleTransaction","limit","get","query","docs","map","doc","setState","allTransactions","data","searchTransactions","console","log","capitalTerm","transaction","componentDidMount","styles","container","searchBar","bar","searchButton","item","borderBottomWidth","BOOKID","STUDENTID","TRANSACTIONTYPE","DATE","toDate","index","toString","Component","StyleSheet","create","flex","marginTop","flexDirection","height","width","borderWidth","alignItems","backgroundColor","paddingLeft","justifyContent"],"mappings":"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","sourcesContent":["/* \nFlatList has 3 key props: \n● data: This contains all the data in the array which needs to be rendered. \n● renderItem: This takes each item from the data array and renders it as described using JSX. This should return a JSX component. \n● keyExtractor: It gives a unique key prop to each item in the list. \nThe unique key prop should be a string. FlatList has two more important props- onEndReached and onEndThreshold \n● onEndReached can call a function to get more transaction documents after the last transaction document we fetched.\n ● onEndThreshold defines when we want to call the function inside onEndReached prop. \n If onEndThreshold is 1, the function will be called when the user has completely scrolled through the list. \n If onEndThreshold is 0.5, the function will be called when the user is mid-way during scrolling the items.\n  */\nimport React from 'react';\nimport {\n  Text,\n  View,\n  TextInput,\n  TouchableOpacity,\n  StyleSheet,\n  ScrollView,\n  FlatList,\n} from 'react-native';\nimport db from '../config';\n\nexport default class Searchscreen extends React.Component {\n  // display ALL the transaction documents from transaction collections in our search screen.\n  //We will create a state array which will hold all the transactions.\n  constructor(props) {\n    super(props);\n    this.state = {\n      allTransactions: [],\n      lastVisibleTransaction: null,\n      searchedID: '',\n    };\n  }\n\n  /* how lazy loading works:\n   Everytime we scroll down, we see new items getting added to the list \n\n   */\n  fetchMoreTransactions = async () => {\n    var text = this.state.searchedID.toUpperCase();\n    var enteredText = text.split('');\n\n    if (enteredText[0].toUpperCase() === 'B') {\n      const query = await db\n        .collection('TRANSACTIONS')\n        .where('BOOKID', '==', text)\n        .startAfter(this.state.lastVisibleTransaction)\n        .limit(10)\n        .get();\n      query.docs.map((doc) => {\n        this.setState({\n          allTransactions: [...this.state.allTransactions, doc.data()],\n          lastVisibleTransaction: doc,\n        });\n      });\n    } else if (enteredText[0].toUpperCase() === 'S') {\n      const query = await db\n        .collection('TRANSACTIONS')\n        .where('STUDENTID', '==', text)\n        .startAfter(this.state.lastVisibleTransaction)\n        .limit(10)\n        .get();\n      query.docs.map((doc) => {\n        this.setState({\n          allTransactions: [...this.state.allTransactions, doc.data()],\n          lastVisibleTransaction: doc,\n        });\n      });\n    }\n  };\n\n  /* \n   When search button is pressed,it will call searchTransactions().\n                                \n   searchTransactions() which checks if the user has entered book id or student id and \n   then fetches the documents matching the book id or student id.\n                                 \n  searchTransactions will first check if the entered text is a book id or a student id (begins with B or S) \n  Depending on that, the function will query the transactions collection matching the book id or student id\n   and add them to the state allTransactions array. \n  Limit the fetched transactions to 10. \n  */\n  searchTransactions = async (text) => {\n    console.log('firstTExt: ' + text);\n    var enteredText = text.split('');\n    console.log('enteredText: ' + enteredText);\n    var capitalTerm = text.toUpperCase();\n    console.log('capitalTerm: ' + capitalTerm);\n    if (enteredText[0].toUpperCase() === 'B') {\n      console.log('bookID is being searched ');\n      const transaction = await db\n        .collection('TRANSACTIONS')\n        .where('BOOKID', '==', text)\n        .get();\n      console.log('searched transaction' + transaction);\n      transaction.docs.map((doc) => {\n        this.setState({\n          allTransactions: [...this.state.allTransactions, doc.data()],\n          lastVisibleTransaction: doc,\n        });\n      });\n    } else if (enteredText[0].toUpperCase() === 'S') {\n      const transaction = await db\n        .collection('TRANSACTIONS')\n        .where('STUDENTID', '==', text)\n        .get();\n      transaction.docs.map((doc) => {\n        this.setState({\n          allTransactions: [...this.state.allTransactions, doc.data()],\n          lastVisibleTransaction: doc,\n        });\n      });\n    }\n  };\n  /*\n When the screen mounts, we will query all the transactions and store them in the state array.\n Store the entire list of transactions inside this.state when the component mounts \n \n We can get only the first 10 transactions in componentDidMount.\n  This will be quicker than getting all the transactions from the collection. \n  Let's store the last transaction doc which we get inside another state called lastVisibleTransaction. \n  */\n  componentDidMount = async () => {\n    const query = await db.collection('TRANSACTIONS').limit(10).get();\n    console.log('searched query' + query);\n    query.docs.map((doc) => {\n      this.setState({\n        allTransactions: [],\n        lastVisibleTransaction: doc,\n      });\n    });\n  };\n\n  /* In the render function for the component, we will map over the state array and display each item. */\n  render() {\n    return (\n      <View style={styles.container}>\n        <View style={styles.searchBar}>\n          <TextInput\n            style={styles.bar}\n            placeholder=\"Enter Book ID or Student ID\"\n            onChangeText={(text) => {\n              this.setState({\n                searchedID: text,\n              });\n            }}\n            value={this.state.searchedID}\n          />\n          <TouchableOpacity\n            style={styles.searchButton}\n            onPress={() => {\n              this.searchTransactions(this.state.searchedID);\n            }}>\n            <Text>Search</Text>\n          </TouchableOpacity>\n        </View>\n        <FlatList\n          data={this.state.allTransactions}\n          renderItem={({ item }) => (\n            <View style={{ borderBottomWidth: 2 }}>\n              <Text>{'Book ID: ' + item.BOOKID}</Text>\n              <Text>{'Student ID: ' + item.STUDENTID}</Text>\n              <Text>{'Transaction Type: ' + item.TRANSACTIONTYPE}</Text>\n              <Text>{'Date: ' + item.DATE.toDate()}</Text>\n            </View>\n          )}\n          keyExtractor={(item, index) => index.toString()}\n          onEndReached={this.fetchMoreTransactions}\n          onEndReachedThreshold={0.7}\n        />\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 20,\n  },\n  searchBar: {\n    flexDirection: 'row',\n    height: 40,\n    width: 'auto',\n    borderWidth: 0.5,\n    alignItems: 'center',\n    backgroundColor: 'grey',\n  },\n  bar: {\n    borderWidth: 2,\n    height: 30,\n    width: 300,\n    paddingLeft: 10,\n  },\n  searchButton: {\n    borderWidth: 1,\n    height: 30,\n    width: 50,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'green',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}