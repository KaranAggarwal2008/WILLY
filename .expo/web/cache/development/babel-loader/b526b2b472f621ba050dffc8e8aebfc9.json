{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Karan\\\\Downloads\\\\Wireless_Library-main\\\\screens\\\\LoginScreen.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport * as firebase from 'firebase';\n\nvar LoginScreen = function (_React$Component) {\n  _inherits(LoginScreen, _React$Component);\n\n  var _super = _createSuper(LoginScreen);\n\n  function LoginScreen() {\n    var _this;\n\n    _classCallCheck(this, LoginScreen);\n\n    _this = _super.call(this);\n\n    _this.login = function _callee(emailInput, passwordInput) {\n      var response;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(emailInput && passwordInput)) {\n                _context.next = 21;\n                break;\n              }\n\n              _context.prev = 1;\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(firebase.auth().signInWithEmailAndPassword(emailInput, passwordInput));\n\n            case 4:\n              response = _context.sent;\n\n              if (response) {\n                _this.props.navigation.navigate('Transaction');\n              }\n\n              _context.next = 19;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](1);\n              _context.t1 = _context.t0.code;\n              _context.next = _context.t1 === 'auth/user-not-found' ? 13 : _context.t1 === 'auth/invalid-email' ? 16 : 19;\n              break;\n\n            case 13:\n              Alert.alert('The user does not exist');\n              console.log(\"user doesn't exist\");\n              return _context.abrupt(\"break\", 19);\n\n            case 16:\n              Alert.alert('The entered email ID or password is incorrect');\n              console.log('invaild user information');\n              return _context.abrupt(\"break\", 19);\n\n            case 19:\n              _context.next = 22;\n              break;\n\n            case 21:\n              Alert.alert('Enter email ID and password');\n\n            case 22:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[1, 8]], Promise);\n    };\n\n    _this.state = {\n      emailId: '',\n      password: ''\n    };\n    return _this;\n  }\n\n  _createClass(LoginScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(KeyboardAvoidingView, {\n        style: {\n          alignItems: 'center',\n          marginTop: 20\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 9\n        }\n      }, React.createElement(Image, {\n        source: require(\"../assets/booklogo.jpg\"),\n        style: {\n          width: 200,\n          height: 200\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }\n      }), React.createElement(Text, {\n        style: {\n          textAlign: 'center',\n          fontSize: 30\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }\n      }, \"Wireless Library\")), React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 9\n        }\n      }, React.createElement(TextInput, {\n        style: styles.loginBox,\n        placeholder: \"abc@example.com\",\n        keyboardType: \"email-address\",\n        onChangeText: function onChangeText(text) {\n          _this2.setState({\n            emailId: text\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }\n      }), React.createElement(TextInput, {\n        style: styles.loginBox,\n        secureTextEntry: true,\n        placeholder: \"Enter Password\",\n        onChangeText: function onChangeText(text) {\n          _this2.setState({\n            password: text\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }\n      })), React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 9\n        }\n      }, React.createElement(TouchableOpacity, {\n        style: {\n          height: 30,\n          width: 90,\n          borderWidth: 1,\n          marginTop: 20,\n          paddingTop: 5,\n          borderRadius: 7\n        },\n        onPress: function onPress() {\n          _this2.login(_this2.state.emailId, _this2.state.password);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }\n      }, React.createElement(Text, {\n        style: {\n          textAlign: 'center'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }\n      }, \"Login\"))));\n    }\n  }]);\n\n  return LoginScreen;\n}(React.Component);\n\nexport { LoginScreen as default };\nvar styles = StyleSheet.create({\n  loginBox: {\n    width: 300,\n    height: 40,\n    borderWidth: 1.5,\n    fontSize: 20,\n    margin: 10,\n    paddingLeft: 10\n  }\n});","map":{"version":3,"sources":["C:/Users/Karan/Downloads/Wireless_Library-main/screens/LoginScreen.js"],"names":["React","firebase","LoginScreen","login","emailInput","passwordInput","auth","signInWithEmailAndPassword","response","props","navigation","navigate","code","Alert","alert","console","log","state","emailId","password","alignItems","marginTop","require","width","height","textAlign","fontSize","styles","loginBox","text","setState","borderWidth","paddingTop","borderRadius","Component","StyleSheet","create","margin","paddingLeft"],"mappings":"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","sourcesContent":["/* \r\ncreating a new screen for the login page.\r\n\r\nWe can simply create a new file inside our screens folder called LoginScreen.js.\r\n \r\nWe will have to create TextInput buttons to collect email and password from the user.\r\n\r\nWe will also have to create a button to navigate inside the application.\r\n \r\nWhen the user enters the email id and password, there should be something to check if the email id and password are registered.\r\n  \r\nFirebase provides an authentication service which helps us do that.\r\n---enable email ‘sign in’ inside the authentication tab in the database for the Wireless library.\r\n \r\n---We need to change our database rules to allow only authenticated users to access,\r\nread and modify our database. There is a separate way for writing complex database rules which we will learn later. \r\nFor now we can just make a small change to allow everyone who is authenticated to read and write values in our database.\r\n\r\n*/\r\n\r\nimport React from 'react';\r\nimport {\r\n  View,\r\n  Text,\r\n  StyleSheet,\r\n  Image,\r\n  TextInput,\r\n  TouchableOpacity,\r\n  Alert,\r\n  KeyboardAvoidingView,\r\n} from 'react-native';\r\nimport * as firebase from 'firebase';\r\nexport default class LoginScreen extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      emailId: '',\r\n      password: '',\r\n    };\r\n  }\r\n\r\n  /* \r\nFUNCTION DEFINITION: \r\nwhen the user presses the button, we will call a login function, which will check if username and password are \r\nregistered or not.\r\n\r\nFirebase provides us an auth service to do that using firebase.auth().signInWthEmailAndPassword()\r\n\r\nOur login function is going to be an async function because it is going to take some time to authenticate.\r\n\r\nUSE firebase.auth().signInWithEmailAndPassword() to authenticate registered user and navigate to the next screen if authentication is successful.\r\n\r\nSometimes, our authentication might throw an unusual error because of different reasons\r\n- like loss of data packets due to bad internet. \r\n\r\nThis might cause our app to behave in unusual ways. We can prevent this from happening by writing our code in try - catch block.\r\n\r\nWhen executed, our code inside the try block will try to run. If there is any error, the catch block will catch\r\nthe error and it can be displayed to the developer or the user \r\n\r\n*/\r\n  login = async (emailInput, passwordInput) => {\r\n    if (emailInput && passwordInput) {\r\n      try {\r\n        const response = await firebase\r\n          .auth()\r\n          .signInWithEmailAndPassword(emailInput, passwordInput);\r\n        if (response) {\r\n          this.props.navigation.navigate('Transaction');\r\n        }\r\n      } catch (error) {\r\n        switch (error.code) {\r\n          case 'auth/user-not-found':\r\n            Alert.alert('The user does not exist');\r\n            console.log(\"user doesn't exist\");\r\n            break;\r\n          case 'auth/invalid-email':\r\n            Alert.alert('The entered email ID or password is incorrect');\r\n            console.log('invaild user information');\r\n            break;\r\n        }\r\n      }\r\n    } else {\r\n      Alert.alert('Enter email ID and password');\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <KeyboardAvoidingView\r\n        style={{\r\n          alignItems: 'center',\r\n          marginTop: 20,\r\n        }}>\r\n        <View>\r\n          <Image\r\n            source={require('../assets/booklogo.jpg')}\r\n            style={{ width: 200, height: 200 }}\r\n          />\r\n          <Text style={{ textAlign: 'center', fontSize: 30 }}>\r\n            Wireless Library\r\n          </Text>\r\n        </View>\r\n        <View>\r\n          <TextInput\r\n            /* The props keyBoardType and secureTextEntry for the TextInput Component is to collect emailID and password from the user */\r\n            style={styles.loginBox}\r\n            placeholder=\"abc@example.com\"\r\n            keyboardType=\"email-address\"\r\n            onChangeText={(text) => {\r\n              this.setState({ emailId: text });\r\n            }}\r\n          />\r\n          <TextInput\r\n            style={styles.loginBox}\r\n            secureTextEntry={true}\r\n            placeholder=\"Enter Password\"\r\n            onChangeText={(text) => {\r\n              this.setState({ password: text });\r\n            }}\r\n          />\r\n        </View>\r\n        <View>\r\n          <TouchableOpacity\r\n            style={{\r\n              height: 30,\r\n              width: 90,\r\n              borderWidth: 1,\r\n              marginTop: 20,\r\n              paddingTop: 5,\r\n              borderRadius: 7,\r\n            }}\r\n            //function call to login and check if the user is valid\r\n            onPress={() => {\r\n              this.login(this.state.emailId, this.state.password);\r\n            }}>\r\n            <Text style={{ textAlign: 'center' }}>Login</Text>\r\n          </TouchableOpacity>\r\n        </View>\r\n      </KeyboardAvoidingView>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  loginBox: {\r\n    width: 300,\r\n    height: 40,\r\n    borderWidth: 1.5,\r\n    fontSize: 20,\r\n    margin: 10,\r\n    paddingLeft: 10,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}