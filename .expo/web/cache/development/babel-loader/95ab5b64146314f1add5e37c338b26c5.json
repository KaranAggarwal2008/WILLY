{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Karan\\\\Downloads\\\\Wireless_Library-main\\\\screens\\\\BookTransactionScreen.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport ToastAndroid from \"react-native-web/dist/exports/ToastAndroid\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport * as Permissions from 'expo-permissions';\nimport { BarCodeScanner } from 'expo-barcode-scanner';\nimport * as firebase from 'firebase';\nimport db from \"../config.js\";\n\nvar TransactionScreen = function (_React$Component) {\n  _inherits(TransactionScreen, _React$Component);\n\n  var _super = _createSuper(TransactionScreen);\n\n  function TransactionScreen() {\n    var _this;\n\n    _classCallCheck(this, TransactionScreen);\n\n    _this = _super.call(this);\n\n    _this.getCameraPermissions = function _callee(id) {\n      var _await$Permissions$as, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.CAMERA));\n\n            case 2:\n              _await$Permissions$as = _context.sent;\n              status = _await$Permissions$as.status;\n\n              _this.setState({\n                hasCameraPermissions: status === 'granted',\n                buttonState: id,\n                scanned: false\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.handleBarCodeScanned = function _callee2(_ref) {\n      var type, data, buttonState;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              type = _ref.type, data = _ref.data;\n              buttonState = _this.state.buttonState;\n\n              if (buttonState === 'BookId') {\n                _this.setState({\n                  scanned: true,\n                  scannedBookId: data,\n                  buttonState: 'normal'\n                });\n              } else if (buttonState === 'StudentId') {\n                _this.setState({\n                  scanned: true,\n                  scannedStudentId: data,\n                  buttonState: 'normal'\n                });\n              }\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.initiateBookIssue = function _callee3() {\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              db.collection('TRANSACTIONS').add({\n                STUDENTID: _this.state.scannedStudentId,\n                BOOKID: _this.state.scannedBookId,\n                DATE: firebase.firestore.Timestamp.now().toDate(),\n                TRANSACTIONTYPE: 'Issue'\n              });\n              db.collection('BOOKS').doc(_this.state.scannedBookId).update({\n                BOOKAVAILABILITY: false\n              });\n              db.collection('STUDENTS').doc(_this.state.scannedStudentId).update({\n                NUMBEROFBOOKSISSUED: firebase.firestore.FieldValue.increment(1)\n              });\n\n              _this.setState({\n                scannedStudentId: '',\n                scannedBookId: ''\n              });\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.initiateBookReturn = function _callee4() {\n      return _regeneratorRuntime.async(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              db.collection('TRANSACTIONS').add({\n                STUDENTID: _this.state.scannedStudentId,\n                BOOKID: _this.state.scannedBookId,\n                DATE: firebase.firestore.Timestamp.now().toDate(),\n                TRANSACTIONTYPE: 'Return'\n              });\n              db.collection('BOOKS').doc(_this.state.scannedBookId).update({\n                BOOKAVAILABILITY: true\n              });\n              db.collection('STUDENTS').doc(_this.state.scannedStudentId).update({\n                NUMBEROFBOOKSISSUED: firebase.firestore.FieldValue.increment(-1)\n              });\n\n              _this.setState({\n                scannedStudentId: '',\n                scannedBookId: ''\n              });\n\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.checkBookEligibility = function _callee5() {\n      var bookRef, transactionType;\n      return _regeneratorRuntime.async(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return _regeneratorRuntime.awrap(db.collection('BOOKS').where('BOOKID', '==', _this.state.scannedBookId).get());\n\n            case 2:\n              bookRef = _context5.sent;\n              transactionType = '';\n\n              if (bookRef.docs.length == 0) {\n                transactionType = false;\n              } else {\n                bookRef.docs.map(function (doc) {\n                  var book = doc.data();\n\n                  if (book.BOOKAVAILABILITY) {\n                    transactionType = 'Issue';\n                  } else {\n                    transactionType = 'Return';\n                  }\n                });\n              }\n\n              return _context5.abrupt(\"return\", transactionType);\n\n            case 6:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.checkStudentEligibilityForBookIssue = function _callee6() {\n      var studentRef, isStudentEligible;\n      return _regeneratorRuntime.async(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return _regeneratorRuntime.awrap(db.collection('STUDENTS').where('STUDENTID', '==', _this.state.scannedStudentId).get());\n\n            case 2:\n              studentRef = _context6.sent;\n              isStudentEligible = '';\n\n              if (studentRef.docs.length == 0) {\n                _this.setState({\n                  scannedStudentId: '',\n                  scannedBookId: ''\n                });\n\n                isStudentEligible = false;\n                Alert.alert(\"The student id doesn't exist in the database!\");\n              } else {\n                studentRef.docs.map(function (doc) {\n                  var student = doc.data();\n\n                  if (student.NUMBEROFBOOKSISSUED < 2) {\n                    isStudentEligible = true;\n                  } else {\n                    isStudentEligible = false;\n                    Alert.alert('The student has already issued 2 books!');\n\n                    _this.setState({\n                      scannedStudentId: '',\n                      scannedBookId: ''\n                    });\n                  }\n                });\n              }\n\n              return _context6.abrupt(\"return\", isStudentEligible);\n\n            case 6:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.checkStudentEligibilityForReturn = function _callee7() {\n      var transactionRef, isStudentEligible;\n      return _regeneratorRuntime.async(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return _regeneratorRuntime.awrap(db.collection('TRANSACTIONS').where('BOOKID', '==', _this.state.scannedBookId).limit(1).get());\n\n            case 2:\n              transactionRef = _context7.sent;\n              isStudentEligible = '';\n              transactionRef.docs.map(function (doc) {\n                var lastBookTransaction = doc.data();\n\n                if (lastBookTransaction.STUDENTID === _this.state.scannedStudentId) {\n                  isStudentEligible = true;\n                } else {\n                  isStudentEligible = false;\n                  Alert.alert(\"The book wasn't issued by this student!\");\n\n                  _this.setState({\n                    scannedStudentId: '',\n                    scannedBookId: ''\n                  });\n                }\n              });\n              return _context7.abrupt(\"return\", isStudentEligible);\n\n            case 6:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.handleTransaction = function _callee8() {\n      var transactionType, transactionMessage, isStudentEligible;\n      return _regeneratorRuntime.async(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return _regeneratorRuntime.awrap(_this.checkBookEligibility());\n\n            case 2:\n              transactionType = _context8.sent;\n\n              if (transactionType) {\n                _context8.next = 8;\n                break;\n              }\n\n              Alert.alert(\"The book doesn't exist in the library database!\");\n\n              _this.setState({\n                scannedStudentId: '',\n                scannedBookId: ''\n              });\n\n              _context8.next = 20;\n              break;\n\n            case 8:\n              if (!(transactionType === 'Issue')) {\n                _context8.next = 15;\n                break;\n              }\n\n              _context8.next = 11;\n              return _regeneratorRuntime.awrap(_this.checkStudentEligibilityForBookIssue());\n\n            case 11:\n              isStudentEligible = _context8.sent;\n\n              if (isStudentEligible) {\n                _this.initiateBookIssue();\n\n                transactionMessage = 'Book Issued';\n                ToastAndroid.show(transactionMessage, ToastAndroid.SHORT);\n              }\n\n              _context8.next = 20;\n              break;\n\n            case 15:\n              if (!(transactionType === 'Return')) {\n                _context8.next = 20;\n                break;\n              }\n\n              _context8.next = 18;\n              return _regeneratorRuntime.awrap(_this.checkStudentEligibilityForReturn());\n\n            case 18:\n              isStudentEligible = _context8.sent;\n\n              if (isStudentEligible) {\n                _this.initiateBookReturn();\n\n                transactionMessage = 'Book Returned';\n                ToastAndroid.show(transactionMessage, ToastAndroid.SHORT);\n              }\n\n            case 20:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.state = {\n      hasCameraPermissions: null,\n      scanned: false,\n      scannedBookId: '',\n      scannedStudentId: '',\n      buttonState: 'normal',\n      transactionMessage: ''\n    };\n    return _this;\n  }\n\n  _createClass(TransactionScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var hasCameraPermissions = this.state.hasCameraPermissions;\n      var scanned = this.state.scanned;\n      var buttonState = this.state.buttonState;\n\n      if (buttonState !== 'normal' && hasCameraPermissions) {\n        return React.createElement(BarCodeScanner, {\n          onBarCodeScanned: scanned ? undefined : this.handleBarCodeScanned,\n          style: StyleSheet.absoluteFillObject,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 9\n          }\n        });\n      } else if (buttonState === 'normal') {\n        return React.createElement(KeyboardAvoidingView, {\n          behavior: \"padding\",\n          style: styles.container,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 9\n          }\n        }, React.createElement(View, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 11\n          }\n        }, React.createElement(Image, {\n          source: require(\"../assets/booklogo.jpg\"),\n          style: {\n            width: 200,\n            height: 200\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 13\n          }\n        }), React.createElement(Text, {\n          style: {\n            textAlign: 'center',\n            fontSize: 30\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 377,\n            columnNumber: 13\n          }\n        }, \"WIRELESS LIBRARY\")), React.createElement(View, {\n          style: styles.inputView,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 379,\n            columnNumber: 11\n          }\n        }, React.createElement(TextInput, {\n          style: styles.inputBox,\n          placeholder: \"Book Id\",\n          onChangeText: function onChangeText(text) {\n            _this2.setState({\n              scannedBookId: text\n            });\n          },\n          value: this.state.scannedBookId,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 380,\n            columnNumber: 13\n          }\n        }), React.createElement(TouchableOpacity, {\n          style: styles.scanButton,\n          onPress: function onPress() {\n            _this2.getCameraPermissions('BookId');\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 13\n          }\n        }, React.createElement(Text, {\n          style: styles.buttonText,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 395,\n            columnNumber: 15\n          }\n        }, \"SCAN\"))), React.createElement(View, {\n          style: styles.inputView,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 11\n          }\n        }, React.createElement(TextInput, {\n          style: styles.inputBox,\n          placeholder: \"Student Id\",\n          onChangeText: function onChangeText(text) {\n            _this2.setState({\n              scannedStudentId: text\n            });\n          },\n          value: this.state.scannedStudentId,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 400,\n            columnNumber: 13\n          }\n        }), React.createElement(TouchableOpacity, {\n          style: styles.scanButton,\n          onPress: function onPress() {\n            _this2.getCameraPermissions('StudentId');\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 13\n          }\n        }, React.createElement(Text, {\n          style: styles.buttonText,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 15\n          }\n        }, \"SCAN\"))), React.createElement(Text, {\n          style: styles.transactionAlert,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 11\n          }\n        }, this.state.transactionMessage), React.createElement(TouchableOpacity, {\n          style: styles.submitButton,\n          onPress: function _callee9() {\n            var transactionMessage;\n            return _regeneratorRuntime.async(function _callee9$(_context9) {\n              while (1) {\n                switch (_context9.prev = _context9.next) {\n                  case 0:\n                    transactionMessage = _this2.handleTransaction();\n\n                  case 1:\n                  case \"end\":\n                    return _context9.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 421,\n            columnNumber: 11\n          }\n        }, React.createElement(Text, {\n          style: styles.submitButtonText,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 13\n          }\n        }, \"Submit\")));\n      }\n    }\n  }]);\n\n  return TransactionScreen;\n}(React.Component);\n\nexport { TransactionScreen as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  displayText: {\n    fontSize: 20,\n    textDecorationLine: 'underline',\n    textAlign: 'center'\n  },\n  scanButton: {\n    backgroundColor: '#66BB6A',\n    width: 50,\n    borderWidth: 1.5,\n    borderLeftWidth: 0\n  },\n  buttonText: {\n    fontSize: 15,\n    textAlign: 'center',\n    marginTop: 7\n  },\n  inputView: {\n    flexDirection: 'row',\n    margin: 20\n  },\n  inputBox: {\n    width: 200,\n    height: 40,\n    borderWidth: 1.5,\n    borderRightWidth: 5,\n    fontSize: 20\n  },\n  submitButton: {\n    backgroundColor: '#FBC02D',\n    width: 100,\n    height: 50\n  },\n  submitButtonText: {\n    padding: 10,\n    textAlign: 'center',\n    fontSize: 20,\n    fontWeight: 'bold'\n  },\n  transactionAlert: {\n    margin: 10,\n    color: 'red'\n  }\n});","map":{"version":3,"sources":["C:/Users/Karan/Downloads/Wireless_Library-main/screens/BookTransactionScreen.js"],"names":["React","Permissions","BarCodeScanner","firebase","db","TransactionScreen","getCameraPermissions","id","askAsync","CAMERA","status","setState","hasCameraPermissions","buttonState","scanned","handleBarCodeScanned","type","data","state","scannedBookId","scannedStudentId","initiateBookIssue","collection","add","STUDENTID","BOOKID","DATE","firestore","Timestamp","now","toDate","TRANSACTIONTYPE","doc","update","BOOKAVAILABILITY","NUMBEROFBOOKSISSUED","FieldValue","increment","initiateBookReturn","checkBookEligibility","where","get","bookRef","transactionType","docs","length","map","book","checkStudentEligibilityForBookIssue","studentRef","isStudentEligible","Alert","alert","student","checkStudentEligibilityForReturn","limit","transactionRef","lastBookTransaction","handleTransaction","transactionMessage","ToastAndroid","show","SHORT","undefined","StyleSheet","absoluteFillObject","styles","container","require","width","height","textAlign","fontSize","inputView","inputBox","text","scanButton","buttonText","transactionAlert","submitButton","submitButtonText","Component","create","flex","justifyContent","alignItems","displayText","textDecorationLine","backgroundColor","borderWidth","borderLeftWidth","marginTop","flexDirection","margin","borderRightWidth","padding","fontWeight","color"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  Text,\n  View,\n  TouchableOpacity,\n  TextInput,\n  Image,\n  StyleSheet,\n  KeyboardAvoidingView,\n  ToastAndroid,\n  Alert,\n} from 'react-native';\nimport * as Permissions from 'expo-permissions';\nimport { BarCodeScanner } from 'expo-barcode-scanner';\nimport * as firebase from 'firebase';\nimport db from '../config.js';\n\nexport default class TransactionScreen extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      hasCameraPermissions: null,\n      scanned: false,\n      scannedBookId: '',\n      scannedStudentId: '',\n      buttonState: 'normal',\n      transactionMessage: '',\n    };\n  }\n\n  getCameraPermissions = async (id) => {\n    const { status } = await Permissions.askAsync(Permissions.CAMERA);\n\n    this.setState({\n      /*status === \"granted\" is true when user has granted permission\n          status === \"granted\" is false when user has not granted the permission\n        */\n      hasCameraPermissions: status === 'granted',\n      buttonState: id,\n      scanned: false,\n    });\n  };\n\n  handleBarCodeScanned = async ({ type, data }) => {\n    const { buttonState } = this.state;\n\n    if (buttonState === 'BookId') {\n      this.setState({\n        scanned: true,\n        scannedBookId: data,\n        buttonState: 'normal',\n      });\n    } else if (buttonState === 'StudentId') {\n      this.setState({\n        scanned: true,\n        scannedStudentId: data,\n        buttonState: 'normal',\n      });\n    }\n  };\n\n  initiateBookIssue = async () => {\n    //add a transaction\n    db.collection('TRANSACTIONS').add({\n      STUDENTID: this.state.scannedStudentId,\n      BOOKID: this.state.scannedBookId,\n      DATE: firebase.firestore.Timestamp.now().toDate(),\n      TRANSACTIONTYPE: 'Issue',\n    });\n    //change book status\n    db.collection('BOOKS').doc(this.state.scannedBookId).update({\n      BOOKAVAILABILITY: false,\n    });\n    //change number  of issued books for student\n    db.collection('STUDENTS')\n      .doc(this.state.scannedStudentId)\n      .update({\n        NUMBEROFBOOKSISSUED: firebase.firestore.FieldValue.increment(1),\n      });\n\n    this.setState({\n      scannedStudentId: '',\n      scannedBookId: '',\n    });\n  };\n\n  initiateBookReturn = async () => {\n    //add a transaction\n    db.collection('TRANSACTIONS').add({\n      STUDENTID: this.state.scannedStudentId,\n      BOOKID: this.state.scannedBookId,\n      DATE: firebase.firestore.Timestamp.now().toDate(),\n      TRANSACTIONTYPE: 'Return',\n    });\n    //change book status\n    db.collection('BOOKS').doc(this.state.scannedBookId).update({\n      BOOKAVAILABILITY: true,\n    });\n    //change number  of issued books for student\n    db.collection('STUDENTS')\n      .doc(this.state.scannedStudentId)\n      .update({\n        NUMBEROFBOOKSISSUED: firebase.firestore.FieldValue.increment(-1),\n      });\n\n    this.setState({\n      scannedStudentId: '',\n      scannedBookId: '',\n    });\n  };\n  /*\ncheckBookEligibility() function which\nwill be an async function\nHere, we will query in our books\ncollections if any document in the\ncollection contains the book id which\nthe user has just entered.\n\nWe can do this usin\n.where(\"bookId\",\"==\",this.state.scann\nedBookId) in our book reference:\nconst bookRef = await\ndb.collection(\"books\").where(\"bookId\",\n\"==\",this.state.scannedBookId).get()\n\nThe query will return a list of\ndocuments (in an array) which will\ncontain in its book id field, the same\nbook id as the scanned book id.\nIf the query returns an empty array, it\nmeans that the book doesn't exist. We\ncan return false if the book doesn't\nexist.\n\n*/\n  checkBookEligibility = async () => {\n    const bookRef = await db\n      .collection('BOOKS')\n      .where('BOOKID', '==', this.state.scannedBookId)\n      .get();\n    var transactionType = '';\n    if (bookRef.docs.length == 0) {\n      transactionType = false;\n    } else {\n      /*\nWe can map over the array element\n(ideally, there would be only one\nelement since each book id is unique)\nand check its book availability. If the\nbook is available we can return the\ntransaction type to 'issue'. If the book\nis not available, we can return the\nbook transaction type to 'return'\n\n*/\n      bookRef.docs.map((doc) => {\n        var book = doc.data();\n        if (book.BOOKAVAILABILITY) {\n          transactionType = 'Issue';\n        } else {\n          transactionType = 'Return';\n        }\n      });\n    }\n\n    return transactionType;\n  };\n  // function definition to send queries to database to obtain results based on different scenarios\n  /*\nthis function returns false\nif the book is not in the database. Else\nif the book is there in the database, it\nchecks the book's availability. After\nchecking the book's eligibility, it\nreturns the transaction type the book\nis eligible for - Issue or Return\n\n*/\n  /*\nIf transaction type is false,\nlet's issue an alert and empty the\nTextinputs\n\nIf the transaction type is \"issue\", let's\ncheck if the student is eligible for the\nbook issue.\nTo be eligible for book issue, the\nstudent should exist in the database\nand the number of books issued by\nthem should be less than 2.\n\nIt returns true if the student\nis eligible and false if the student is\nnot eligible.\nIf the student is eligible, let's call our\nfunction initiateBookIssue() and issue\nan alert that the book has been\nissued.\n\nSimply, put:\n- We need to check if the\nstudent id exists in the\ndatabase\n- If it exists, we need to\ncheck if the student has\nissued more than 2 books\n - if not,we return true\nElse, we return false\n*/\n  checkStudentEligibilityForBookIssue = async () => {\n    const studentRef = await db\n      .collection('STUDENTS')\n      .where('STUDENTID', '==', this.state.scannedStudentId)\n      .get();\n    var isStudentEligible = '';\n    if (studentRef.docs.length == 0) {\n      this.setState({\n        scannedStudentId: '',\n        scannedBookId: '',\n      });\n      isStudentEligible = false;\n      // issue alerts in the app for any transaction type.\n      Alert.alert(\"The student id doesn't exist in the database!\");\n    } else {\n      studentRef.docs.map((doc) => {\n        var student = doc.data();\n        if (student.NUMBEROFBOOKSISSUED < 2) {\n          isStudentEligible = true;\n        } else {\n          isStudentEligible = false;\n          // issue alerts in the app for any transaction type.\n          Alert.alert('The student has already issued 2 books!');\n          this.setState({\n            scannedStudentId: '',\n            scannedBookId: '',\n          });\n        }\n      });\n    }\n\n    return isStudentEligible;\n  };\n\n  /*\nIf the transaction type is\nreturn, we can call a\nfunction\ncheckStudentEligibilityForB\nookReturn() which checks if\nthe student is eligible for\nBook Returns.\nWe can check the last\ntransaction for the book and\nsee if the book was issued\nby that student in the last\ntransaction.\n\nthe\ncheckStudentEligibilityForReturn() is\nan abstract function which returns\ntrue if the student is eligible for return\nand false if the student is not eligible.\n\nIf the student is eligible, let's call a\nfunction which returns the book.\nAlso, we can clear the TextInput\nboxes as we return the book.\n\nWe need to query the last\ntransaction for the book\nWe need to check if the last\nbook transaction was\nperformed by the same\nstudent\n*/\n\n  checkStudentEligibilityForReturn = async () => {\n    const transactionRef = await db\n      .collection('TRANSACTIONS')\n      .where('BOOKID', '==', this.state.scannedBookId)\n      .limit(1)\n      .get();\n    var isStudentEligible = '';\n    transactionRef.docs.map((doc) => {\n      var lastBookTransaction = doc.data();\n      if (lastBookTransaction.STUDENTID === this.state.scannedStudentId) {\n        isStudentEligible = true;\n      } else {\n        isStudentEligible = false;\n        // issue alerts in the app for any transaction type.\n        Alert.alert(\"The book wasn't issued by this student!\");\n        this.setState({\n          scannedStudentId: '',\n          scannedBookId: '',\n        });\n      }\n    });\n    return isStudentEligible;\n  };\n\n  handleTransaction = async () => {\n    //verify if the student is eligible for book issue or return or none\n    //student id exists in the database\n    //issue : number of book issued < 2\n    //issue: verify book availability\n    //return: last transaction -> book issued by the student id\n    var transactionType = await this.checkBookEligibility();\n    var transactionMessage;\n    if (!transactionType) {\n      // issue alerts in the app for any transaction type.\n      Alert.alert(\"The book doesn't exist in the library database!\");\n      this.setState({\n        scannedStudentId: '',\n        scannedBookId: '',\n      });\n    } else if (transactionType === 'Issue') {\n      var isStudentEligible = await this.checkStudentEligibilityForBookIssue();\n      if (isStudentEligible) {\n        this.initiateBookIssue();\n        transactionMessage = 'Book Issued';\n\n        /*\n            1. we want to display a message to the user when a transaction (issue or return) is \n            completed. We have been using Alerts for this !!!\n            2. Import Toast from react-native and replaces the Alert with Toast\n            3. Using Toast you can set a duration for a message to be shown and then it disappear\n            4. It is the best approach to want to empty the textinput when the transaction \n            is completed so that we are ready for another book transaction.\n          ------ToastAndroid.show(transactionMessage, ToastAndroid.SHORT);\n          */\n        // issue alerts in the app for any transaction type.\n        //Alert.alert(\"Book issued to the student!\");\n        ToastAndroid.show(transactionMessage, ToastAndroid.SHORT);\n      }\n    } else if(transactionType === 'Return'){\n      var isStudentEligible = await this.checkStudentEligibilityForReturn();\n      if (isStudentEligible) {\n        this.initiateBookReturn();\n        transactionMessage = 'Book Returned';\n\n        /*\n            1. we want to display a message to the user when a transaction (issue or return) is \n            completed. We have been using Alerts for this !!!\n            2. Import Toast from react-native and replaces the Alert with Toast\n            3. Using Toast you can set a duration for a message to be shown and then it disappear\n            4. It is the best approach to want to empty the textinput when the transaction \n            is completed so that we are ready for another book transaction.\n          ------ToastAndroid.show(transactionMessage, ToastAndroid.SHORT);\n          */\n        // issue alerts in the app for any transaction type.\n        //Alert.alert(\"Book issued to the student!\");\n        ToastAndroid.show(transactionMessage, ToastAndroid.SHORT);\n      }\n    }\n  };\n\n  render() {\n    const hasCameraPermissions = this.state.hasCameraPermissions;\n    const scanned = this.state.scanned;\n    const buttonState = this.state.buttonState;\n\n    if (buttonState !== 'normal' && hasCameraPermissions) {\n      return (\n        <BarCodeScanner\n          onBarCodeScanned={scanned ? undefined : this.handleBarCodeScanned}\n          style={StyleSheet.absoluteFillObject}\n        />\n      );\n    } else if (buttonState === 'normal') {\n      return (\n        <KeyboardAvoidingView behavior=\"padding\" style={styles.container}>\n          <View>\n            <Image\n              source={require('../assets/booklogo.jpg')}\n              style={{ width: 200, height: 200 }}\n            />\n            <Text style={{ textAlign: 'center', fontSize: 30 }}>WIRELESS LIBRARY</Text>\n          </View>\n          <View style={styles.inputView}>\n            <TextInput\n              style={styles.inputBox}\n              placeholder=\"Book Id\"\n              onChangeText={(text) => {\n                this.setState({\n                  scannedBookId: text,\n                });\n              }}\n              value={this.state.scannedBookId}\n            />\n            <TouchableOpacity\n              style={styles.scanButton}\n              onPress={() => {\n                this.getCameraPermissions('BookId');\n              }}>\n              <Text style={styles.buttonText}>SCAN</Text>\n            </TouchableOpacity>\n          </View>\n\n          <View style={styles.inputView}>\n            <TextInput\n              style={styles.inputBox}\n              placeholder=\"Student Id\"\n              onChangeText={(text) => {\n                this.setState({\n                  scannedStudentId: text,\n                });\n              }}\n              value={this.state.scannedStudentId}\n            />\n            <TouchableOpacity\n              style={styles.scanButton}\n              onPress={() => {\n                this.getCameraPermissions('StudentId');\n              }}>\n              <Text style={styles.buttonText}>SCAN</Text>\n            </TouchableOpacity>\n          </View>\n          <Text style={styles.transactionAlert}>\n            {this.state.transactionMessage}\n          </Text>\n          <TouchableOpacity\n            style={styles.submitButton}\n            onPress={async () => {\n              var transactionMessage = this.handleTransaction();\n            }}>\n            <Text style={styles.submitButtonText}>Submit</Text>\n          </TouchableOpacity>\n        </KeyboardAvoidingView>\n      );\n    }\n  }\n}\n\nconst styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    displayText:{\n      fontSize: 20,\n      textDecorationLine: 'underline',\n      textAlign: 'center'\n    },\n    scanButton:{\n      backgroundColor: '#66BB6A',\n      width: 50,\n      borderWidth: 1.5,\n      borderLeftWidth: 0\n    },\n    buttonText:{\n      fontSize: 15,\n      textAlign: 'center',\n      marginTop: 7\n    },\n    inputView:{\n      flexDirection: 'row',\n      margin: 20\n    },\n    inputBox:{\n      width: 200,\n      height: 40,\n      borderWidth: 1.5,\n      borderRightWidth: 5,\n      fontSize: 20\n    },\n    submitButton:{\n      backgroundColor: '#FBC02D',\n      width: 100,\n      height: 50\n    },\n    submitButtonText:{\n      padding: 10,\n      textAlign: 'center',\n      fontSize: 20,\n      fontWeight: 'bold'\n    },\n        transactionAlert:{\n      margin:10,\n      color: 'red'\n    }\n  });"]},"metadata":{},"sourceType":"module"}